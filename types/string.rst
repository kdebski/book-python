.. _Character Types:

***************
Character Types
***************


``str``
=======
* ``"`` and ``'`` works the same
* Sequence of Unicode characters (UTF-16 or UTF-32, depending on how Python was compiled

* Defining ``str``:

    .. code-block:: python

        name = 'Jos√©'       # 'Jos√©'
        name = "Jos√©"       # 'Jos√©'

        name: str = 'Jos√©'  # 'Jos√©'
        name: str = "Jos√©"  # 'Jos√©'

* ``str`` multiplication:

    .. code-block:: python

        'Jos√©' * 3          # Jos√©Jos√©Jos√©

* ``str()`` converts argument to ``str``":

    .. code-block:: python

        str(1969)           # '1969'
        str(13.37)          # '13.37'

* Multiline ``str``

    .. code-block:: python

        names = """
            We choose to go to the Moon!
            We choose to go to the Moon in this decade and do the other things,
            not because they are easy, but because they are hard.
        """

        print(names)
        # '\n    We choose to go to the Moon!\n    We choose to go to the Moon in this decade and do the other things, not because they are easy, but because they are hard.'


Single or double quote?
=======================
* ``"`` and ``'`` works the same
* Choose one and keep consistency in code
* Python console uses ``'``, this is why I use ``'`` in this book
* ``doctest`` uses single quotes and throws error on double quotes
* Avoid single quotes, when ``str`` has a lot of contractions:

    .. code-block:: python

        my_str = 'it\'s Jos√©\'s book'
        my_str = "it's Jos√©'s book"

* HTML uses double quotes, hence it's convenient to use single ones for ``str``:

    .. code-block:: python

        my_str = '<a href="http://python.astrotech.io">Python and Machine Learning</a>'

Escape characters
=================
.. code-block:: text

    \n
    \r\n

.. figure:: img/type-machine.jpg
    :scale: 25%
    :align: center

    Why we have '\\r\\n' on Windows?

.. code-block:: text

    \x1F680     # after \x goes hexadecimal number
    \U0001F680  # after \u goes four hexadecimal numbers
    üöÄ
    \t
    \'

Characters before strings
=========================
* Format string: since Python 3.6
* ``str`` = ``u'..'`` = ``'...'`` literals = a sequence of Unicode characters (UTF-16 or UTF-32, depending on how Python was compiled)
* ``bytes`` = ``b'...'`` literals = a sequence of octets (integers between 0 and 255)

.. csv-table:: String modifiers
    :header-rows: 1
    :widths: 15, 30, 55
    :file: data/str-modifiers.csv

.. code-block:: python

    name = 'Jos√© Jim√©nez'

    f'My name... {name}'
    u'za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ'
    b'this is bytes literals'
    r'(?P<foo>)\n'
    r'C:\Users\Admin\file.txt'

.. code-block:: python

    print('C:\Users\Admin\file.txt')
    # ``\Users`` (``s`` is invalid hexadecimal for unicode)
    # SyntaxError: (unicode error) 'unicodeescape' codec can't decode bytes in position 2-3: truncated \UXXXXXXXX escape


``print()``
===========
* ``print()`` adds ``'\n'`` at the end
* Prints on the screen

    .. code-block:: python

        print('My name... Jos√© Jim√©nez')
        # My name... Jos√© Jim√©nez

* You can substitute variables

    .. code-block:: python

        name = 'Jos√© Jim√©nez'

        print(f'My name... {name}')
        # My name... Jos√© Jim√©nez

        print(f'My name...\n\t{name}')
        # My name...
        #   Jos√© Jim√©nez

* f-string formatting are preferred over ``str`` addition
* How many ``str`` are in the memory?

    .. code-block:: python

        first_name = 'Jos√©'
        last_name = 'Jim√©nez'

        print(first_name + ' ' + last_name)  # Jos√© Jim√©nez
        print(f'{first_name} {last_name}')   # Jos√© Jim√©nez

.. note:: More in :ref:`Print Formatting`


String methods
==============

String immutability
-------------------
* ``str`` is immutable
* ``str`` methods create a new modified ``str``

.. code-block:: python

    a = 'Python'
    a.replace('P', 'J')

    print(a)
    # Python

.. code-block:: python

    a = 'Python'
    b = a.replace('P', 'J')
    print(b)
    # Jython

.. code-block:: python

    a = 'Python'
    b = b.upper().replace('J', 'Tr')
    print(b)
    # TrYTHON

``title()``, ``lower()``, ``upper()``
-------------------------------------
* Unify data format before analysis
* Is this the same address?:

    .. code-block:: text

        'Jana III Sobieskiego 1/2'
        'ul Jana III Sobieskiego 1/2'
        'ul. Jana III Sobieskiego 1/2'
        'ul.Jana III Sobieskiego 1/2'
        'ulicaJana III Sobieskiego 1/2'
        'Ul. Jana III Sobieskiego 1/2'
        'UL. Jana III Sobieskiego 1/2'
        'ulica Jana III Sobieskiego 1/2'
        'Ulica. Jana III Sobieskiego 1/2'
        'os. Jana III Sobieskiego 1/2'
        'plac Jana III Sobieskiego 1/2'
        'pl Jana III Sobieskiego 1/2'
        'al Jana III Sobieskiego 1/2'
        'al. Jana III Sobieskiego 1/2'
        'aleja Jana III Sobieskiego 1/2'
        'alei Jana III Sobieskiego 1/2'
        'Jana 3 Sobieskiego 1/2'
        'Jana 3ego Sobieskiego 1/2'
        'Jana III Sobieskiego 1 m. 2'
        'Jana III Sobieskiego 1 apt 2'
        'Jana Iii Sobieskiego 1/2'
        'Jana IIi Sobieskiego 1/2'
        'Jana lll Sobieskiego 1/2'  # three small letters 'L'
        'Kozia w√≥lka 5'
        ...

.. code-block:: python

    name = 'joS√© jiM√©nEz III'

    name.title()    # 'Jos√© Jim√©nez Iii'
    name.upper()    # 'JOS√â JIM√âNEZ III'
    name.lower()    # 'jos√© jim√©nez iii'

``replace()``
-------------
.. code-block:: python

    name = 'Jos√© Jim√©nez Iii'
    name.replace('Iii', 'III')  # 'Jos√© Jim√©nez III'

``strip()``, ``lstrip()``, ``rstrip()``
---------------------------------------
.. code-block:: python

    name = '\tMark Watney    \n'

    name.rstrip()       # '\tMark Watney'
    name.lstrip()       # 'Mark Watney    \n'
    name.strip()        # 'Mark Watney'

``startswith()`` and ``endswith()``
-----------------------------------
* Understand this as "starts with" and "ends with"

.. code-block:: python

    name = 'Jos√© Jim√©nez'

    name.startswith('Jos√©')
    # True

    name.endswith(';')
    # False

``split()``
-----------
.. code-block:: python

    text = 'Jos√© Jim√©nez'
    text.split()        # ['Jos√©', 'Jim√©nez']

    text = 'root:x:0:0:System Administrator:/root:/bin/bash'
    text.split(':')     # ['root', 'x', '0', '0', 'System Administrator', '/root', '/bin/bash']

``join()``
----------
.. code-block:: python

    names = ['root', 'x', '0', '0', 'System Administrator', '/root', '/bin/bash']

    ':'.join(names)
    # 'root:x:0:0:System Administrator:/root:/bin/bash'


Handling user input
===================
* ``input()`` returns ``str``
* Space at the end of prompt

.. code-block:: python

    name = input('Type your name: ')


Assignments
===========

String cleaning
---------------
#. Dane poni≈ºej przeczy≈õƒá, tak aby zmienne zawiera≈Çy ciƒÖg znak√≥w ``'Jana III Sobieskiego'``

.. code-block:: python

        a = ' 1/2'
        b = 'ul Jana III Sobieskiego 1/2'
        c = 'ul. Jana III Sobieskiego 1/2'
        d = 'ul.Jana III Sobieskiego 1/2'
        e = 'ulicaJana III Sobieskiego 1/2'
        f = 'Ul. Jana III Sobieskiego 1/2'
        g = 'UL. Jana III Sobieskiego 1/2'
        h = 'ulica Jana III Sobieskiego 1/2'
        i = 'Ulica. Jana III Sobieskiego 1/2'
        j = 'Jana 3 Sobieskiego 1/2'
        k = 'Jana III Sobieskiego 1 m. 2'
        l = 'Jana III Sobieskiego 1 apt 2'

Variables and types
-------------------
#. Wczytaj od u≈ºytkownika imiƒô
#. Za pomocƒÖ f-string formatting wy≈õwietl na ekranie:

    .. code-block:: text

        '''My name... "Jos√© Jim√©nez".
	    	I'm an """astronaut!"""'''

#. Uwaga! Druga linijka zaczyna siƒô od tabulacji
#. Gdzie warto≈õƒá w podw√≥jnym cudzys≈Çowiu to ciƒÖg od u≈ºytkownika (w przyk≈Çadzie u≈ºytkownik wpisa≈Ç ``Jos√© Jim√©nez``)
#. Zwr√≥ƒá uwagƒô na znaki apostrof√≥w, cudzys≈Çow√≥w, tabulacji i nowych linii
#. W ciƒÖgu do wy≈õwietlenia nie u≈ºywaj spacji ani enter√≥w - u≈ºyj ``\n`` i ``\t``
#. Tekst wy≈õwietlony na ekranie ma mieƒá zamienione wszystkie spacje na ``_``
#. Tekst wy≈õwietlony na ekranie ma byƒá w UPPERCASE
#. Nie korzystaj z dodawania string√≥w (``str + str``)
#. Nastƒôpnie zn√≥w wy≈õwietl na ekranie wynik, tym razem z podmienionymi spacjami:

    .. code-block:: text

        '''MY_NAME_"JOS√â_JIM√âNEZ".
        _I'M_AN_"""ASTRONAUT!"""'''

:About:
    * Filename: ``types_input.py``
    * Lines of code to write: 4 lines
    * Estimated time of completion: 10 min

:The whys and wherefores:
    * Definiowanie zmiennych
    * Korzystanie z print formatting
    * Wczytywanie tekstu od u≈ºytkownika
